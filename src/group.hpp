/*
 * Copyright © 2015-2019 Barcelona Supercomputing Center (BSC)
 *
 * This file is part of SMUFIN Core. SMUFIN Core is released under the SMUFIN
 * Public License, and may not be used except in compliance with it. This file
 * is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; see the SMUFIN Public License for more details. You should have
 * received a copy of the SMUFIN Public License along with this file. If not,
 * see <https://github.com/smufin/smufin-core/blob/master/COPYING>.
 *
 * Jordà Polo <jorda.polo@bsc.es>, 2015-2018
 */

#ifndef __SM_GROUP_H__
#define __SM_GROUP_H__

#include <thread>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#include <google/sparse_hash_map>
#include <rocksdb/db.h>

#include "db.hpp"
#include "common.hpp"
#include "stage.hpp"

#define KMIN 0
#define KMAX MAX_READ_LEN

#define MAX_GROUPERS 128

#define ENCODED_READ_LEN CEIL(MAX_READ_LEN, 32)

typedef std::array<std::vector<int>, 2> p_value;
typedef std::array<std::vector<std::string>, 2> k_value;
typedef std::array<std::unordered_set<std::string>, 2> i_value;

// l2p: Lead ID to positions, direction A [0] and B [1]
// l2k: Lead ID to kmers, direction A [0] and B [1]
// l2i: Lead ID to sequence IDs, normal N [0] and tumoral T [1]
// l2r: Lead ID to lead sequence
typedef google::sparse_hash_map<std::string, p_value> l2p_table;
typedef google::sparse_hash_map<std::string, k_value> l2k_table;
typedef google::sparse_hash_map<std::string, i_value> l2i_table;
typedef google::sparse_hash_map<std::string, std::string> l2r_table;

typedef std::array<std::unordered_map<std::string, int>, 2> kmer_count;

class group : public stage
{
public:
    group(const sm_config &conf);
    void run();
    void stats();

private:
    uint64_t _leads_size = 0;

    l2p_table* _l2p[MAX_GROUPERS];
    l2k_table* _l2k[MAX_GROUPERS];
    l2i_table* _l2i[MAX_GROUPERS];
    l2r_table* _l2r[MAX_GROUPERS];

    // rocksdb::DB* _seq[2];
    // rocksdb::DB* _k2i[2];

    int _group_map_l1[MAP_FILE_LEN] = {0};
    int _group_map_l2[MAP_FILE_LEN] = {0};

    // Number of groups successfully generated by each grouper thread.
    uint64_t _num_groups[MAX_GROUPERS] = {0};

    void select_candidate(int gid, std::string& sid, std::string& seq,
                          std::string& dseq, std::vector<int>& pos, int dir);

    void populate(int gid);
    void populate_index(int gid, const std::string& lid,
                        const std::vector<std::string>& kmers, int kind,
                        kmer_count& keep, kmer_count& drop, rdb_handle &rdb);
};

void get_positions(const uint64_t bitmap[POS_LEN], std::vector<int> *pos);
bool match_window(const std::vector<int> pos, int window_min, int window_len);

#endif
