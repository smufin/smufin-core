/*
 * Copyright © 2015-2019 Barcelona Supercomputing Center (BSC)
 *
 * This file is part of SMUFIN Core. SMUFIN Core is released under the SMUFIN
 * Public License, and may not be used except in compliance with it. This file
 * is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; see the SMUFIN Public License for more details. You should have
 * received a copy of the SMUFIN Public License along with this file. If not,
 * see <https://github.com/smufin/smufin-core/blob/master/COPYING>.
 *
 * Jordà Polo <jorda.polo@bsc.es>, 2018-2019
 */

#ifndef __SM_GROUP_ROCKS_H__
#define __SM_GROUP_ROCKS_H__

#include <thread>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#include <google/sparse_hash_map>
#include <msgpack.hpp>

#include "common.hpp"
#include "group.hpp"
#include "stage.hpp"

typedef std::pair<std::string, std::array<int, 4>> sm_group_kmer;
typedef std::pair<std::string, std::string> sm_group_read;

struct sm_group {
    sm_group_read lead;
    std::array<std::vector<int>, 2> pos;
    std::array<std::vector<sm_group_kmer>, 2> kmers;
    std::array<std::vector<sm_group_read>, 2> reads;
    MSGPACK_DEFINE(lead, pos, kmers, reads);
};

class group_rocks : public stage
{
public:
    group_rocks(const sm_config &conf);
    void run();
    void dump();
    void stats();

private:
    uint64_t _leads_size = 0;

    rdb_handle _groups[MAX_GROUPERS];

    rdb_handle _k2i[2];
    rdb_handle _seq[2];

    int _group_map_l1[MAP_FILE_LEN] = {0};
    int _group_map_l2[MAP_FILE_LEN] = {0};

    // Number of groups generated by each grouper thread.
    uint64_t _num_groups[MAX_GROUPERS] = {0};

    void select_candidate(int gid, std::string& sid, std::string& seq,
                          std::string& dseq, std::vector<int>& pos, int dir,
                          sm_group& group);

    void populate(int gid);
    void populate_kmers(sm_group& group, sm_idx_set set, rdb_handle &rdb);
    void populate_reads(sm_group& group, sm_idx_set set, rdb_handle &rdb);

    void dump_groups(int gid);
};

#endif
