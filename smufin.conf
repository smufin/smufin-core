[core]
k = 30

# Partitioning is the scaling mechanism that allows distributing the
# computation, splitting data into different chunks that can be processed
# independently. Partitions can be adapted to run sequentially or in parallel,
# in a single or multiple machines. While increasing the number of partitions
# lowers the peak amount of memory, it also increases the amount of duplicate
# data during the filter stage, which in turn may incur in slower merging.
#
# «num-partitions» represents the total number of partitions, while «pid» is
# the current partition that will is processed in a particular execution, in
# the range [0, num-partitions).
num-partitions = 1
pid = 0

num-loaders = 1
num-storers = 1
num-filters = 1
num-mergers = 1
num-groupers = 1

input = /path/to/input/file
output = /path/to/output/dir
data = ./data

exec = count:run,stats

[count]
table-size = 12800000000
cache-size = 106240000000

[filter]
# Candidate kmer filtering/selection based on imbalanced absolute counts with
# the following criteria: at most «max-normal-count» normal kmers, and at
# least «min-tumor-count».
max-normal-count = 1
min-tumor-count = 4

# Maximum number of reads per kmer. Kmers seen in more than «max-k2i-reads»
# different reads are discarded when building the filter indexes.
max-k2i-reads = 2000

[group]
# Groups are generated after finding "leader" reads using a window-based
# technique. A read becomes a "leader" if it contains at least «window-min»
# candidate kmers in a window of «window-len» bases.
window-min = 7
window-len = 10

# vim: ft=dosini
