[core]
# Length of k-mers, which is the size of the substrings that reads will be
# split into in order to be analyzed. The recommended value is in the range of
# [28, 32]; currently only k-mers of up to length 32 are supported.
k = 30

# Partitioning is the scaling mechanism that allows distributing the
# computation, splitting data into different chunks that can be processed
# independently. Partitions can be adapted to run sequentially or in parallel,
# in a single or multiple machines. While increasing the number of partitions
# lowers the peak amount of memory, it also increases the amount of duplicate
# data during the filter stage, which in turn may incur in slower merging.
#
# «num-partitions» represents the total number of partitions, while «pid» is
# the current partition that will is processed in a particular execution, in
# the range [0, num-partitions).
num-partitions = 1
pid = 0

num-loaders = 1
num-storers = 1
num-filters = 1
num-mergers = 1
num-groupers = 1

# Input format for normal and tumoral samples. Two formats are available:
# - fastq: gzipped FASTQ files (recommended)
# - bam: aligned BAM files with corresponding BAI index (experimental).
input-format = fastq

# Paths to normal and tumoral input files. For multiple files, wildcard
# expansion is supported, e.g. «file-*.fq.gz».
input-normal = /path/to/normal/input/files
input-tumor = /path/to/tumor/input/files

output = /path/to/output/dir
data = ./data

# Commands to execute, with the following format:
#   <exec> --> STAGE:<command> | <exec>;<exec>
#   <command> --> COMMAND | <command>,<command>
# For a list of available stages and commands, see README.md.
# E.g. «count:run,dump», «count:restore;filter:run,dump».
exec = count:run,stats

[prune]
# Desired false-positive (FP) probability for both bloom filters, «all» and
# «allowed». Lower FP rates involve a higher number of hash functions to be
# calculated, which translates into additional computation to create and
# access the bloom filters. Note that this is only used as a performance
# tradeoff; a lower rate doesn't have any impact in the results since later
# filters address and discard FPs.
false-positive-rate = 0.05

# Number of expected items in the bloom filters. Higher capacity translates
# into additional memory. The «all» bloom filter should be approximately an
# order of magnitude larger than the «allowed» bloom filter.
all-size = 100000000000
allowed-size = 10000000000

[count]
# The count cache keeps track of kmers that are seen only once so as to not to
# include them in the tables, reducing the overall memory footprint. It's
# enabled by default and recommended when running standalone counts, but it
# can be disabled when running with prune.
enable-cache = true

# Total number of expected items in the cache and table; generally speaking,
# the cache contains stems seen once or more, while the table contains stems
# seen more than once (so it's smaller). Sizes may need to be adjusted
# depending on the input so as to not to over or under-provision the memory.
# E.g. an input with ~4,250 million 80bp reads with a coverage of 60x
# requires a cache of size 106240000000 and a table of size 12800000000.
cache-size = 106240000000
table-size = 12800000000

# Limit exported rows to a particular subset of kmers that match the following
# minimum/maximum frequencies. That is, either the normal count or the tumoral
# count of the kmer is strictly greater than «export-min» and less than
# «export-max» (both excluded).
export-min = 28
export-max = 32

[filter]
# Format used to store filtering indexes. Two kinds of formats are supported:
# - plain: In-memory hashtables that are dumped to disk as simple
#   space-separated plain text files.
# - rocks: RocksDB-backed databases, optimized for writing, then compacted for
#   later stages.
index-format = plain

# Number of indexes built for each partition. Increasing the number of indexes
# can speed up the filter stage, potentially slowing down the merge stage.
# Should be smaller or equal to the number of filter threads,
# «core.num-filters».
num-indexes = 1

# Candidate kmer filtering/selection based on imbalanced absolute counts with
# the following criteria: at most «max-normal-count» normal kmers, and at
# least «min-tumor-count».
max-normal-count = 1
min-tumor-count = 4

# Maximum number of reads per kmer; kmers seen in more than «max-reads»
# different reads are discarded when building the filter indexes.
max-reads = 2000

[group]
# Groups are generated after finding "leader" reads using a window-based
# technique. A read becomes a "leader" if it contains at least «window-min»
# candidate kmers in a window of «window-len» bases.
window-min = 7
window-len = 10

# Maximum number of reads per kmer; reads from kmers with more than
# «max-reads» reads are dropped from the groups file and marked as such in the
# results. Note that only reads are dropped, no kmers will be removed. This
# value should be lower than «filter.max-reads».
max-reads = 500

# Estimate number of candidate lead reads, which identify groups. For best
# performance, this value should be slightly higher than the actual number of
# candidate leads.
leads-size = 12800000

# vim: ft=dosini
